name: Deploy Infrastructure

on:
  push:
    branches:
      - main
      - new-bonus-section
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VAR_environment: ${{ secrets.TF_VAR_environment }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get SSH Keys from AWS Secrets Manager
        id: get-ssh-keys
        run: |
          # Get EC2 SSH public key
          EC2_KEY=$(aws secretsmanager get-secret-value \
            --secret-id "$TF_VAR_environment/ec2-ssh-public-key" \
            --query 'SecretString' \
            --output text)
          echo "TF_VAR_ssh_public_key_value=$EC2_KEY" >> $GITHUB_ENV
          
          # Get NAT SSH public key
          NAT_KEY=$(aws secretsmanager get-secret-value \
            --secret-id "$TF_VAR_environment/nat-ssh-public-key" \
            --query 'SecretString' \
            --output text)
          echo "TF_VAR_ssh_public_key_nat_value=$NAT_KEY" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

  deploy:
    name: Deploy Infrastructure
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get SSH Keys from AWS Secrets Manager
        id: get-ssh-keys
        run: |
          # Get EC2 SSH public key
          EC2_KEY=$(aws secretsmanager get-secret-value \
            --secret-id "$TF_VAR_environment/ec2-ssh-public-key" \
            --query 'SecretString' \
            --output text)
          echo "TF_VAR_ssh_public_key_value=$EC2_KEY" >> $GITHUB_ENV
          
          # Get NAT SSH public key
          NAT_KEY=$(aws secretsmanager get-secret-value \
            --secret-id "$TF_VAR_environment/nat-ssh-public-key" \
            --query 'SecretString' \
            --output text)
          echo "TF_VAR_ssh_public_key_nat_value=$NAT_KEY" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get ALB DNS
        id: alb-dns
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Create Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "ALB DNS: ${{ steps.alb-dns.outputs.alb_dns }}" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Post-Deployment Notification
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Create Deployment Comment
        uses: actions/github-script@v7
        with:
          script: |
            const albDns = '${{ needs.deploy.outputs.alb_dns }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Deployment completed successfully!\n\n Application is available at: ${albDns}`
            }); 