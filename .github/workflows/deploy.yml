name: Deploy Infrastructure

on:
  push:
    branches:
      - main
      - new-bonus-section
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VAR_environment: ${{ secrets.TF_VAR_environment }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  validate:
    name: Validate Terraform Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

  deploy:
    name: Deploy Infrastructure
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get ALB DNS
        id: alb-dns
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT
    outputs:
      alb_dns: ${{ steps.alb-dns.outputs.alb_dns }}

  notify:
    name: Post-Deployment Notification
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Get ALB DNS
        id: alb-dns
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "alb_dns=$ALB_DNS" >> $GITHUB_OUTPUT

      - name: Create Deployment Summary
        run: |
          ALB_DNS=$(terraform output -raw alb_dns_name)
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "Infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "ALB DNS: $ALB_DNS" >> $GITHUB_STEP_SUMMARY

      - name: Create Deployment Comment
        if: github.event_name == 'pull_request' || github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const albDns = '${{ steps.alb-dns.outputs.alb_dns }}';
            if (context.issue.number) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Deployment completed successfully!\n\nApplication is available at: ${albDns}`
              });
            } 